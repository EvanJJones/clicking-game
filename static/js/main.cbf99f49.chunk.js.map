{"version":3,"sources":["components/ScoreBar.js","components/Image.js","components/Container.js","components/Rules.js","App.js","serviceWorker.js","index.js"],"names":["styles","width","height","display","justifyContent","alignItems","backgroundColor","ScoreBar","props","style","score","hiScore","Image","src","alt","className","onClick","clickImage","id","flexWrap","Container","children","flexDirection","margin","padding","markedRead","App","state","images","clicked","rulesRead","includes","console","log","setState","newScore","push","shuffleImages","i","length","j","Math","floor","random","temp","this","Rules","map","image","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAEMA,EAAS,CACbC,MAAO,OACPC,OAAQ,OACRC,QAAS,OACTC,eAAgB,eAChBC,WAAY,SACZC,gBAAiB,WAYJC,MATf,SAAkBC,GAChB,OACE,yBAAKC,MAAOT,GACV,sCAAYQ,EAAME,OAClB,2CAAiBF,EAAMG,WCPdC,MANf,SAAeJ,GACb,OACE,yBAAKK,IAAKL,EAAMK,IAAKC,IAAKN,EAAMM,IAAKb,MAAO,IAAKc,UAAU,gBAAgBC,QAAS,kBAAMR,EAAMS,WAAWT,EAAMU,Q,OCF/GlB,EAAS,CACbC,MAAO,OACPC,OAAQ,MACRC,QAAS,OACTC,eAAgB,eAChBe,SAAU,QAWGC,MARf,SAAmBZ,GACjB,OACE,yBAAKC,MAAOT,GACTQ,EAAMa,WCXPrB,EAAS,CACbC,MAAO,OACPE,QAAS,OACTmB,cAAe,SACflB,eAAgB,eAChBC,WAAY,SACZC,gBAAiB,UACjBiB,OAAQ,gBACRC,QAAS,QAiBIjB,MAdf,SAAkBC,GAChB,OACE,yBAAKC,MAAOT,GACV,qCACA,4BACE,mGACA,6FACA,kFAEF,4BAAQgB,QAASR,EAAMiB,YAAvB,kBC8DSC,E,2MA7EbC,MAAQ,CACNC,SACAC,QAAS,GACTnB,MAAO,EACPC,QAAS,EACTmB,WAAW,G,EAGbb,WAAa,SAACC,GACZ,GAAI,EAAKS,MAAME,QAAQE,SAASb,GAC9Bc,QAAQC,IAAI,YAEZ,EAAKC,SAAS,CAACxB,MAAO,EAAGmB,QAAS,SAC9B,CACJ,IAAMM,EAAW,EAAKR,MAAMjB,MAAQ,EAC9BmB,EAAU,EAAKF,MAAME,QAC3BA,EAAQO,KAAKlB,GACTiB,GAAY,EAAKR,MAAMhB,SACzB,EAAKuB,SAAS,CAACvB,QAASwB,IAG1B,EAAKD,SAAS,CAACL,UAASnB,MAAOyB,IAGjC,EAAKE,iB,EAGPA,cAAgB,WAId,IAHA,IAAMT,EAAS,EAAKD,MAAMC,OAGlBU,EAAIV,EAAOW,OAAS,EAAGD,EAAI,EAAGA,IAAI,CACxC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,SAAWL,GAC/BM,EAAOhB,EAAOU,GACpBV,EAAOU,GAAKV,EAAOY,GACnBZ,EAAOY,GAAKI,EAGd,EAAKV,SAAS,CAACN,Y,EAIjBH,WAAa,WACX,EAAKS,SAAS,CAACJ,WAAW,K,wEAGlB,IAAD,OACP,OAEE,yBAAKf,UAAU,aACZ8B,KAAKlB,MAAMG,UACV,KAEA,kBAACgB,EAAD,CACErB,WAAYoB,KAAKpB,aAGrB,kBAAC,EAAD,CACEf,MAAOmC,KAAKlB,MAAMjB,MAClBC,QAASkC,KAAKlB,MAAMhB,UAEtB,kBAAC,EAAD,KACGkC,KAAKlB,MAAMC,OAAOmB,KAAI,SAACC,GAAD,OACrB,kBAAC,EAAD,CACEnC,IAAKmC,EAAMnC,IACXoC,IAAKD,EAAM9B,GACXA,GAAI8B,EAAM9B,GACVD,WAAY,EAAKA,sB,GApEbiC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.cbf99f49.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst styles = {\r\n  width: \"100%\",\r\n  height: \"75px\",\r\n  display: \"flex\",\r\n  justifyContent: \"space-evenly\",\r\n  alignItems: \"center\",\r\n  backgroundColor: \"#00b3b3\"\r\n\r\n}\r\nfunction ScoreBar(props) {\r\n  return (\r\n    <div style={styles}>\r\n      <h1>Score: {props.score}</h1>\r\n      <h1>High-Score: {props.hiScore}</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScoreBar;\r\n","import React from \"react\";\r\n\r\nfunction Image(props) {\r\n  return (\r\n    <img src={props.src} alt={props.alt} width={175} className=\"img-thumbnail\" onClick={() => props.clickImage(props.id)}></img>\r\n  );\r\n}\r\n\r\nexport default Image;\r\n","import React from \"react\";\r\n\r\nconst styles = {\r\n  width: \"100%\",\r\n  height: \"80%\",\r\n  display: \"flex\",\r\n  justifyContent: \"space-evenly\",\r\n  flexWrap: \"wrap\"\r\n\r\n}\r\nfunction Container(props) {\r\n  return (\r\n    <div style={styles}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\n\r\nconst styles = {\r\n  width: \"100%\",\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  justifyContent: \"space-evenly\",\r\n  alignItems: \"center\",\r\n  backgroundColor: \"#fdff8f\",\r\n  margin: \"1rem 0 1rem 0\",\r\n  padding: \"1rem\"\r\n\r\n}\r\nfunction ScoreBar(props) {\r\n  return (\r\n    <div style={styles}>\r\n      <h2>Rules</h2>\r\n      <ul>\r\n        <li>Click as many cards as you can without clicking the same card twice</li>\r\n        <li>The game resets when you click the same car twice in one game</li>\r\n        <li>The board will shuffle each time you click a card</li>\r\n      </ul>\r\n      <button onClick={props.markedRead}>Done Reading</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScoreBar;\r\n","import React, { Component } from \"react\";\r\nimport ScoreBar from \"./components/ScoreBar\";\r\nimport Image from \"./components/Image.js\";\r\nimport images from \"./images.json\";\r\nimport Container from \"./components/Container.js\"\r\nimport Rules from \"./components/Rules.js\"\r\nclass App extends Component {\r\n  state = {\r\n    images,\r\n    clicked: [],\r\n    score: 0,\r\n    hiScore: 0,\r\n    rulesRead: false\r\n  }\r\n\r\n  clickImage = (id) => {\r\n    if (this.state.clicked.includes(id)){\r\n      console.log('you lose');\r\n      \r\n      this.setState({score: 0, clicked: []})\r\n    }else {\r\n      const newScore = this.state.score + 1;\r\n      const clicked = this.state.clicked\r\n      clicked.push(id);\r\n      if (newScore >= this.state.hiScore) {\r\n        this.setState({hiScore: newScore})\r\n      }\r\n      \r\n      this.setState({clicked, score: newScore});\r\n    }\r\n\r\n    this.shuffleImages();\r\n  };\r\n\r\n  shuffleImages = () => {\r\n    const images = this.state.images;\r\n\r\n    // shuffle from https://medium.com/@nitinpatel_20236/how-to-shuffle-correctly-shuffle-an-array-in-javascript-15ea3f84bfb\r\n    for(let i = images.length - 1; i > 0; i--){\r\n      const j = Math.floor(Math.random() * i)\r\n      const temp = images[i]\r\n      images[i] = images[j]\r\n      images[j] = temp\r\n    }\r\n\r\n    this.setState({images});\r\n    \r\n  };\r\n\r\n  markedRead = () => {\r\n    this.setState({rulesRead: true})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      \r\n      <div className=\"container\">\r\n        {this.state.rulesRead ? (\r\n          null\r\n        ) : (\r\n          <Rules \r\n            markedRead={this.markedRead}\r\n          />\r\n        )}\r\n        <ScoreBar \r\n          score={this.state.score}\r\n          hiScore={this.state.hiScore}\r\n        />\r\n        <Container>\r\n          {this.state.images.map((image) => (\r\n            <Image \r\n              src={image.src}\r\n              key={image.id}\r\n              id={image.id}\r\n              clickImage={this.clickImage}\r\n            />\r\n          ))}\r\n        </Container>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}