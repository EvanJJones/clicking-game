{"version":3,"sources":["components/ScoreBar.js","components/Image.js","components/Container.js","components/Rules.js","App.js","serviceWorker.js","index.js"],"names":["mainStyle","width","height","display","justifyContent","alignItems","backgroundColor","elementStyle","textAlign","ScoreBar","props","style","score","message","hiScore","Image","state","flipped","matched","lastClicked","clickImage","id","match","setState","flipCard","console","log","src","this","back","alt","className","onClick","Component","styles","flexWrap","Container","children","flexDirection","margin","padding","markedRead","App","images","rulesRead","count","matchedCount","map","image","flipImage","forEach","shuffleImages","id2","i","length","j","Math","floor","random","temp","loseGame","clicked","Rules","key","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c6e2367.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst mainStyle = {\r\n  width: \"100%\",\r\n  height: \"75px\",\r\n  display: \"flex\",\r\n  justifyContent: \"space-evenly\",\r\n  alignItems: \"center\",\r\n  backgroundColor: \"#00b3b3\"\r\n}\r\n\r\nconst elementStyle = {\r\n  width: \"30%\",\r\n  textAlign: \"center\"\r\n}\r\nfunction ScoreBar(props) {\r\n  return (\r\n    <div style={mainStyle}>\r\n      <h1>Score: {props.score}</h1>\r\n      <h2 style={elementStyle}>{props.message}</h2>\r\n      <h1>High-Score: {props.hiScore}</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScoreBar;\r\n","import React, {Component} from \"react\";\r\n\r\nclass Image extends Component {\r\n  state = {\r\n    flipped: false,\r\n    matched: false,\r\n    lastClicked: 0\r\n  }\r\n\r\n  clickImage = (id, match) => {;\r\n    if (this.state.lastClicked === 0) {\r\n      this.setState({lastClicked: id});\r\n    } else if (this.state.lastClicked === match) {\r\n      this.setState({lastClicked: 0, matched: true});\r\n    } else {\r\n      this.setState({lastClicked: 0});\r\n    }\r\n\r\n  };\r\n\r\n  flipCard = () => {\r\n    console.log(this.props.id);\r\n    this.setState({flipped: true})\r\n  }\r\n  render() {\r\n    return (\r\n\r\n    <img src={this.props.flipped ? this.props.src : this.props.back} alt={this.props.alt} width=\"16.5%\" className=\"img-thumbnail\" onClick={() => this.props.clickImage(this.props.id, this.props.match)}></img>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Image;\r\n","import React from \"react\";\r\n\r\nconst styles = {\r\n  width: \"100%\",\r\n  height: \"80%\",\r\n  display: \"flex\",\r\n  justifyContent: \"space-evenly\",\r\n  flexWrap: \"wrap\"\r\n\r\n}\r\nfunction Container(props) {\r\n  return (\r\n    <div style={styles}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\n\r\nconst styles = {\r\n  width: \"100%\",\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  justifyContent: \"space-evenly\",\r\n  alignItems: \"center\",\r\n  backgroundColor: \"#fdff8f\",\r\n  margin: \"1rem 0 1rem 0\",\r\n  padding: \"1rem\"\r\n\r\n}\r\nfunction ScoreBar(props) {\r\n  return (\r\n    <div style={styles}>\r\n      <h2>Rules</h2>\r\n      <ul>\r\n        <li>Click a card to reveal what it is</li>\r\n        <li>Click another card to try and create a match</li>\r\n        <li>if they match they will stay flipped, otherwise they will flip back when you click again</li>\r\n        \r\n      </ul>\r\n      <button onClick={props.markedRead}>Done Reading</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScoreBar;\r\n","import React, { Component } from \"react\";\r\nimport ScoreBar from \"./components/ScoreBar\";\r\nimport Image from \"./components/Image.js\";\r\nimport images from \"./memoryImages.json\";\r\nimport Container from \"./components/Container.js\"\r\nimport Rules from \"./components/Rules.js\"\r\n\r\nclass App extends Component {\r\n  state = {\r\n    images,\r\n    lastClicked: 0,\r\n    score: 0,\r\n    hiScore: 0,\r\n    rulesRead: false,\r\n    count: 0,\r\n    matchedCount: 0,\r\n    message: \"\"\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.shuffleImages();\r\n  }\r\n\r\n  clickImage = (id, match) => {\r\n    this.setState({score: this.state.score + 1, message: \"\"});\r\n    // re flips cards on third click after two wrong\r\n    if (this.state.count >= 2){\r\n      const images = this.state.images.map((image) => {\r\n        if (image.matched === false && image.flipped === true) {\r\n          image.flipped = false;\r\n        }\r\n        return image;\r\n      });\r\n      this.setState({images});\r\n    }\r\n    // flips card\r\n    this.flipImage(id);\r\n\r\n    // if first click\r\n    if (this.state.lastClicked === 0) {\r\n      this.setState({lastClicked: id, count: 1});\r\n\r\n      // if correct match\r\n    } else if (this.state.lastClicked === match) {\r\n      const images = this.state.images.map((image) => {\r\n        if (image.id === id || image.id === match) {\r\n          image.matched = true;\r\n        }\r\n        return image;\r\n      });\r\n      this.setState({lastClicked: 0, images, count: 0, matchedCount: this.state.matchedCount + 1});\r\n      console.log(this.state.matchedCount);\r\n      if (this.state.matchedCount >= 5) {\r\n        if (this.state.score < this.state.hiScore || this.state.hiScore === 0) {\r\n          console.log(this.state.score);\r\n          this.setState({hiScore: this.state.score})\r\n        }\r\n        \r\n\r\n        const images = this.state.images;\r\n        console.log(images);\r\n        images.forEach((image) => {\r\n          image.matched = false;\r\n          image.flipped = false;\r\n        });\r\n        this.setState({message: \"You Win!\", score: 0, images, matchedCount: 0});\r\n        this.shuffleImages();\r\n      }\r\n\r\n      // if second click is not a match\r\n    } else if (id !== this.state.lastClicked) {\r\n      this.setState({lastClicked: 0, count: 2});\r\n    }\r\n\r\n  };\r\n\r\n  // flips card\r\n  flipImage = (id, id2) => {\r\n    const images = this.state.images.map((image) => {\r\n      if ((image.id === id || image.id === id2) && !image.matched) {\r\n        if (image.flipped === false) {\r\n          image.flipped = true;\r\n        } else {\r\n          image.flipped = false;\r\n        }\r\n        \r\n      }\r\n      return image;\r\n    })\r\n    this.setState({images});\r\n  };\r\n\r\n  // called at the begginning to arrange cards randomly\r\n  shuffleImages = () => {\r\n    const images = this.state.images;\r\n\r\n    // shuffle from https://medium.com/@nitinpatel_20236/how-to-shuffle-correctly-shuffle-an-array-in-javascript-15ea3f84bfb\r\n    for(let i = images.length - 1; i > 0; i--){\r\n      const j = Math.floor(Math.random() * i)\r\n      const temp = images[i]\r\n      images[i] = images[j]\r\n      images[j] = temp\r\n    }\r\n\r\n    this.setState({images});\r\n    \r\n  };\r\n\r\n  markedRead = () => {\r\n    this.setState({rulesRead: true})\r\n  }\r\n\r\n  loseGame = () => {\r\n    this.setState({score: 0, clicked: [], message: \"You Lost\"})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      \r\n      <div className=\"container\">\r\n        {this.state.rulesRead ? (\r\n          null\r\n        ) : (\r\n          <Rules \r\n            markedRead={this.markedRead}\r\n          />\r\n        )}\r\n        <ScoreBar \r\n          score={this.state.score}\r\n          message={this.state.message}\r\n          hiScore={this.state.hiScore}\r\n        />\r\n        <Container>\r\n          {this.state.images.map((image) => (\r\n              <Image \r\n                src={image.src}\r\n                back={image.back}\r\n                key={image.id}\r\n                id={image.id}\r\n                match={image.match}\r\n                flipped={image.flipped}\r\n                matched={image.matched}\r\n                clickImage={this.clickImage}\r\n              />\r\n          ))}\r\n        </Container>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}